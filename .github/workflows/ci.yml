name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Start Docker daemon
      run: |
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        newgrp docker
    
    - name: Verify Docker installation
      run: |
        docker --version
        docker info
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=docker_cicd_manager --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
    
    - name: Run Black (code formatting)
      run: black --check --diff .
    
    - name: Run Flake8 (linting)
      run: flake8 docker_cicd_manager tests/
    
    - name: Run MyPy (type checking)
      run: mypy docker_cicd_manager/

  docker-test:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    services:
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start Docker daemon
      run: |
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        newgrp docker
    
    - name: Pull test images
      run: |
        docker pull ubuntu:latest
        docker pull python:3.11-slim
        docker pull alpine:latest
        docker pull busybox:latest
    
    - name: Run Docker integration tests
      run: |
        pytest tests/test_docker_manager.py::TestDockerManager::test_create_simple_test_container -v
        pytest tests/test_docker_manager.py::TestDockerManager::test_create_python_test_container -v
        pytest tests/test_docker_manager.py::TestDockerManager::test_create_multiple_test_containers -v
    
    - name: Cleanup Docker containers
      if: always()
      run: |
        docker container prune -f
        docker image prune -f

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, docker-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: bandit -r docker_cicd_manager/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json