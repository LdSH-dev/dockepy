name: Deploy to PyPI

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests (unless skipped)
      if: ${{ !inputs.skip_tests }}
      run: |
        pytest tests/ -v --cov=docker_cicd_manager --cov-report=xml

    - name: Run linting
      run: |
        echo "Running Black..."
        black --check --diff .
        echo "Running Flake8..."
        flake8 docker_cicd_manager tests/
        echo "Running MyPy..."
        mypy docker_cicd_manager/

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        VERSION_TYPE="${{ inputs.version_type }}"
        
        # Split version into parts
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $VERSION_TYPE in
          major)
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
            ;;
          minor)
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
            ;;
          patch)
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
            ;;
        esac
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Update version in pyproject.toml
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
        echo "Updated pyproject.toml to version $NEW_VERSION"

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Create Git tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "ðŸš€ Release version $NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"

    - name: Push changes and tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Upload to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.new_version.outputs.new_version }}
        release_name: Release v${{ steps.new_version.outputs.new_version }}
        body: |
          ## ðŸš€ Release v${{ steps.new_version.outputs.new_version }}
          
          ### Changes
          - Automated release via GitHub Actions
          - Version bump: ${{ steps.current_version.outputs.current_version }} â†’ ${{ steps.new_version.outputs.new_version }}
          
          ### Installation
          ```bash
          pip install dockepy==${{ steps.new_version.outputs.new_version }}
          ```
          
          ### What's New
          - Docker container management
          - CI/CD integration
          - Type safety with MyPy
          - Comprehensive testing
        draft: false
        prerelease: false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/